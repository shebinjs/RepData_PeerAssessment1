str(movies)
quantile(movies$length)
quantile(movies$length, seq(1:4))
quantile(movies$length, seq(0,1))
quantile(movies$length, seq(0,1, length=4))
c <- quantile(movies$length, seq(0,1, length=4))
class(c)
cut(movies$length, c)
c
q()
sample(1:10)
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X
X[sample(1:5),]
x<- 1:10
x
x[1]
x[5]
x[53]
x[5,1]
x[sample(1:5)]
x[sample(1:5),]
x[sample(1:8)]
x <- 10:1
x
x[sample(1:5)]
X[sample(1:5),]
X[var2,]
X["var2",]
?which
sort(x)
X
X$var2[3]
X$var2[c(1,3)]
X$var2[c(1,3)] <- NA
X
sort(X$var2)
sort(X$var2, na.last = T)
sort(X$var2)
which(X$var2)
which(X$var2 <8)
which(X$var2 > 8)
X$var2
order(X$var2)
?order
?arrange
library(plyr)
?arrange
airquality
head(airquality)
tail(airquality)
summary(airquality)
star(airquality)
str(airquality)
quantile(airquality$Solar.R)
quantile(airquality$Solar.R, na.rm = T)
quantile(airquality$Solar.R, na.rm = D)
quantile(airquality$Solar.R, na.rm = T)
?table
table(airquality$Solar.R)
table(airquality$Solar.R, useNA = "ifany")
table(airquality$Solar.R, useNA = "always")
dim(table(airquality$Solar.R, useNA = "always"))
table(airquality$Month, airquality$Solar.R, useNA = "always")
table(airquality$Month, airquality$Solar.R)
table(airquality$Month, airquality$Solar.R, useNA = "always")
any(1:5)
any(FALSE)
any(F)
any(C)
any(X)
table(airquality$Month = 5)
table(airquality$Month == 5)
table(airquality$Month == 6)
?all
table(airquality$Month %in% 6)
table(airquality$Month %in% 7)
table(airquality$Month %in% 5:7)
table(airquality$Month %in% 5:8)
table(airquality$Month %in% 5:9)
airquality$Month %in% 5:9
airquality[airquality$Month %in% 5]
airquality[airquality$Month %in% 5,]
airquality[airquality$Month %in% 6,]
airquality[,airquality$Month %in% 6]
airquality[airquality$Month %in% 6, 1]
data(UCBAdmissions)
names(UCBAdmissions)
DF <- as.data.frame(UCBAdmissions)
names(DF
)
str(DF)
xtabs(Freq ~ Gender + Admit, DF
)
xtabs(Freq ~ Gender + Admit, DF)
xtabs(Freq ~ Gender - Admit, DF)
xtabs(Freq ~ Gender * Admit, DF)
object.size(DF)
download.file()
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "./acs.csv")
DF <- read.csv("acs.csv")
names(DF)
dim(DF)
dim(DF[DF$ACR == 3, DF$AGS == 6])
dim(DF[DF$ACR == 3 & DF$AGS == 6,])
dim(DF)
head(DF[DF$ACR == 3 & DF$AGS == 6,])
DF[DF$ACR == 3 & DF$AGS == 6,]
DF
head(DF,2)
class(DF)
DF[(DF$ACR == 3 & DF$AGS == 6),]
DF[which(DF$ACR == 3 & DF$AGS == 6),]
dim(DF[which(DF$ACR == 3 & DF$AGS == 6),])
agricultureLogical <- DF[which(DF$ACR == 3 & DF$AGS == 6),]
head(agricultureLogical$SERIALNO)
head(agricultureLogical$RT)
DF$ACR == 3 & DF$AGS == 6
dim(DF)
agricultureLogical <- (DF$ACR == 3 & DF$AGS == 6)
which(agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
readJPEG(source = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE)
jpg <- readJPEG(source = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE)
jpg <- readJPEG(source = system.file("img", "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", package = "jpeg"), native = TRUE)
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "./sss.jpg")
jpg <- readJPEG(source = "sss.jpg", native = TRUE)
quantile(jpg, probs = c(0.3, 0.8))
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "./sss.jpg")
jpg <- readJPEG(source = "sss.jpg", native = TRUE)
jpg <- readJPEG(source = "sss.jpg", native = TRUE)
jpg <- readJPEG(source = "sss.jpg", native = TRUE)
quantile(jpg, probs = c(0.3, 0.8))
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "./GDP.csv")
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "./EDU.csv")
GDP <- read.csv("GDP.csv")
EDU <- read.csv("EDU.csv")
dim(GDP)
dim(EDU)
names(GDP)
names(EDU)
merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=T)
dim(merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=T))
names(merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=T))
dim(GDP)
dim(EDU)
names(GDP)
names(EDU)
head(GDP)
head(EDU[,1:5])
head(EDU["CountryCode" == "USA",1:5])
head(EDU[EDU$CountryCode == "USA",1:5])
?merge
dim(merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=F))
dim(merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=FALSE))
?match
merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=FALSE)[1:5, 1:4]
GDP <- read.csv("GDP.csv")
EDU <- read.csv("EDU.csv")
dim(merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=FALSE))
merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=FALSE)[, 1:4]
dim(merge(GDP, EDU, by.x = "X.2", by.y = "CountryCode", all=FALSE))
dim(merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=FALSE))
dim(merge(GDP, EDU, by.x = "X", by.y = "CountryCode1", all=FALSE))
dim(merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=FALSE))
sss <- merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=FALSE)
dim(sss)
sss[order(sss$X),1:3]
names(sss)
head(sss[order(sss$X),c(1,11)],15)
?order
head(sss[order(sss$X, decreasing = TRUE),c(1,11)],15)
dim(GDP)
GDP <- read.csv("getdata-data-GDP.csv")
dim(GDP)
EDU <- read.csv("getdata-data-EDSTATS_Country.csv")
dim(EDU)
dim(merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=FALSE))
dim(merge(GDP, EDU, by.x = "X", by.y = "CountryCode", all=TRUE))
GDP$X
EDU$CountryCode
dim(GDP[GDP$X != "",])
dim(merge(x = GDP, y = EDU, by.x = "X", by.y = "CountryCode", all = FALSE))
names(EDU)
names(GDP)
dim(sss)
names(sss)
sss[,mean(X.1, na.rm = TRUE), by = Income.Group]
table(sss$X.1)
table(sss$Income.Group)
source('E:/Shebinz/Personalz/06 Online Courses/Coursera - Data Science Specialization/Coursera - Getting n Cleaning Data/Project/run_analysis.R')
source('E:/Shebinz/Personalz/06 Online Courses/Coursera - Data Science Specialization/Coursera - Getting n Cleaning Data/Project/run_analysis.R')
?
grep
source('E:/Shebinz/Personalz/06 Online Courses/Coursera - Data Science Specialization/Coursera - Getting n Cleaning Data/Project/run_analysis.R')
rnorm(12)
rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
set.seed(1234)
rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
rep(1:3, each = 4)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
x
y
plot(x, y, pch = 19)
plot(x, y, pch = 19, cex = 2)
plot(x, y, pch = 19)
plot(x, y, pch = 19, cex = 2, col = "blue")
text(x = x+0.05, y = y + 0.05, labels = as.character(1:12))
text(x = x+0.05, y = y + 0.05, labels = as.character(1:12))
text(x = x+0.05, y = y + 0.055, labels = as.character(1:12))
text(x = x+0.05, y = y + 0.55, labels = as.character(1:12))
plot(x, y, pch = 19, cex = 2, col = "blue")
text(x = x+0.1, y = y + 0.1, labels = as.character(1:12))
data.frame(x, y)
dist(data.frame(x, y))
dist(data.frame(x, y))
dist(data.frame(x, y))
dstxy <- dist(data.frame(x, y))
plot(hclust(dstxy))
set.seed(143)
sample(1:12)
sample(1:12)
set.seed(143)
sample(1:12)
x
y
data.frame(x, y)
kmeans(data.frame(x, y), centers = 1)
plot(x, y, col=blue, pch = 19, cex = 3)
plot(x, y, col="blue", pch = 19, cex = 3)
plot(x, y, col="blue", pch = 19, cex = 2)
plot(x, y, col="blue", pch = 19, cex = 1)
plot(x, y, col="blue", pch = 19, cex = 2)
text(x+0.1, y+0.1, label=c(1:12))
kmeans(data.frame(x, y), centers = 1)
kmeans(data.frame(x, y), centers = 3)
kmCl <- kmeans(data.frame(x, y), centers = 3)
plot(x, y, col=kmCl$cluster, pch = 19, cex = 2)
plot(x, y, col="blue", pch = 19, cex = 2)
plot(x, y, col=kmCl$cluster, pch = 19, cex = 2)
points(kmCl$centers, col = kmCl$cluster, pch = 3, cex = 3, lwd = 3)
points(kmCl$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmCl$cluster
rbinom(n = 1, size = 2, prob = 0.5)
rbinom(n = 1, size = 2, prob = 0.5)
rbinom(n = 1, size = 2, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
rbinom(n = 1, size = 1, prob = 0.5)
heat.colors()
heat.colors(n = 10)
heat.colors(n = 10, alpha = 1)
heat.colors(n = 10, alpha = 0)
heat.colors(n = 10, alpha = 3)
colors()
colors(1:5)
class(colors())
colors()[1:5]
colorRamp()
colorRamp(1)
gray(alpha = )
gray(alpha = 1)
library(swirl)
swirl
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dum(mydf)
dim(mydf)
names(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
class(mydf)
cran <- tbl_df(mydf)
class(cran)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
names(cran)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version ==
| "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
dim(cran)
dim(by_package)
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
0
q()
q()
swirl()
library(swirl)
swirl()
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(studnets2, sex_class, count)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
xeparate(res, col = sex_class, into = c("sex", "class"))
separate(res, col = sex_class, into = c("sex", "class"))
head(students2)
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
?gather
students3
submit()
extract_numeric("class5")
extract_numeric("class5")
submit()
submit()
?mutate
submit()
submit()
reset()
submit()
skip()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
print
students4
submit()
submit()
submit()
skip()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
skip()
skip()
q()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=dplyr)
help(package=lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
dmy("25081985")
ymd("192012")
ymd("1920/1/2")
dtl
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
this_moment
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 7, minutes = 48, seconds = 55)
this_moment
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
depart <- depart + hours(17), minutes(34)
depart <- depart + hours(17) + minutes(34)
arrive <- depart + hours(17) + minutes(34)
arrive <- depart + hours(15) + minutes(34)
depart <- nyc + days(2)
depart <- update(depart, hours = 17, minutes = 34)
arrive <- depart + hours(15) + minutes(34)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
info()
skip()
arrive <- depart + hours(15) + minutes(50)
depart <- update(depart, hours = 17, minutes = 34)
arrive <- depart + hours(15) + minutes(50)
bye()
q()
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
dim(spam)
str(spam[,1:5])
names(spam)
?rbinom
rbinom(10, 2, 0.5)
rbinom(10, 1, 0.5)
indic <- rbinom(4601, 1, 0.5)
trainset <- spam[indic == 1,]
testset <- spam[indic == 0,]
dim(trainset)
dim(testset)
table(indic)
q()
---
*123
Now()
SysDate()
Sys.Date()
Sys.Datetime()
Sys.DateTime()
Sys.Date()
browseURL(url = "www.google.co.in")
library(datasets)
data(airquality)
str(airquality)
?dim
dim(activitydata)
setwd("E:/Shebinz/Personalz/06 Online Courses/Coursera - Data Science Specialization/Coursera - Reproducible Research/Week 2/RepProject")
activitydata <- read.csv(unz("activity.zip", filename = "activity.csv"))
dim(activitydata)
names(activitydata)
head(activitydata)
?hist
hist(x = activitydata$steps)
